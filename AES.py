from CNF import CNF
import os

class AES:
    def __init__( self, number_of_row, number_of_column, P, TKP = None ):
        self._R = number_of_row
        self._C = number_of_column
        self._N = self._R * self._C
        self._P = P
        self._TKP = TKP

    def perm( self, X ):
        Y = []
        for i in range( self._N ):
            Y.append( X[ self._P[i] ] )

        return Y

    def TK_perm( self, X ):
        Y = []
        for i in range( self._N ):
            Y.append( X[ self._TKP[i] ] )

        return Y

    def _xor( self, x, y, z ):
        '''
        x ^ y ^ z = 1
        (0, 0, 1)
        (0, 1, 0)
        (1, 0, 0)
        (1, 1, 1)
        '''
        # 0 0 1 0 1 0 1 0 0 1 1 1 
        s = '%d %d -%d 0' % ( x, y, z )
        self.addClause( s )
        s = '%d -%d %d 0' % ( x, y, z )
        self.addClause( s )
        s = '-%d %d %d 0' % ( x, y, z )
        self.addClause( s )
        s = '-%d -%d -%d 0' % ( x, y, z )
        self.addClause( s )

    def _eq( self, x, y ):
        '''
        (x, y) = (0, 1)
        (x, y) = (1, 0)
        '''
        #self.gen_constr_exclude_vector( [x, y], [ [0,1], [1,0] ] )
        s = '-%d %d 0' % ( x, y )
        self.addClause( s )
        s = '%d -%d 0' % ( x, y )
        self.addClause( s )


    def XOR( self, X, Y, Z ):
        for i in range(self._N ):
            self._xor( X[i], Y[i], Z[i] )

    def HALFXOR( self, X, Y, Z ):
        for i in range( self._N ):
            if i < self._N / 2: 
                self._xor( X[i], Y[i], Z[i] )
            else:
                self._eq( X[i], Z[i] )


if __name__ == '__main__':
    P = [ 0, 1, 2, 3, \
          5, 6, 7, 4, 
          10, 11, 8, 9, 
          15, 12, 13, 14 ]

    V = [['1', '-', '-', '-', '-', '0', '0', '0'], ['-', '1', '-', '-', '0', '-', '0', '0'], ['-', '-', '1', '0', '-', '-', '0', '0'], ['-', '-', '0', '1', '-', '-', '0', '0'], ['-', '0', '-', '-', '1', '-', '0', '0'], ['0', '-', '-', '-', '-', '1', '0', '0'], ['-', '-', '1', '-', '0', '0', '-', '0'], ['-', '1', '-', '0', '-', '0', '-', '0'], ['-', '-', '0', '-', '1', '0', '-', '0'], ['-', '0', '-', '1', '-', '0', '-', '0'], ['0', '-', '-', '-', '-', '0', '1', '0'], ['1', '-', '-', '0', '0', '-', '-', '0'], ['-', '-', '0', '-', '0', '1', '-', '0'], ['-', '0', '-', '-', '0', '-', '1', '0'], ['0', '-', '-', '1', '0', '-', '-', '0'], ['-', '-', '0', '0', '-', '-', '1', '0'], ['-', '0', '-', '0', '-', '1', '-', '0'], ['0', '-', '-', '0', '1', '-', '-', '0'], ['1', '0', '0', '-', '-', '-', '-', '0'], ['0', '1', '0', '-', '-', '-', '-', '0'], ['0', '0', '1', '-', '-', '-', '-', '0'], ['-', '-', '-', '1', '0', '0', '0', '-'], ['-', '-', '-', '0', '1', '0', '0', '-'], ['-', '1', '0', '-', '-', '0', '0', '-'], ['-', '0', '1', '-', '-', '0', '0', '-'], ['0', '-', '-', '-', '-', '0', '0', '1'], ['-', '-', '-', '0', '0', '1', '0', '-'], ['1', '-', '0', '-', '0', '-', '0', '-'], ['-', '0', '-', '-', '0', '-', '0', '1'], ['0', '-', '1', '-', '0', '-', '0', '-'], ['-', '-', '0', '0', '-', '-', '0', '1'], ['1', '0', '-', '0', '-', '-', '0', '-'], ['0', '1', '-', '0', '-', '-', '0', '-'], ['-', '0', '0', '-', '-', '1', '0', '-'], ['0', '-', '0', '-', '1', '-', '0', '-'], ['0', '0', '-', '1', '-', '-', '0', '-'], ['-', '-', '-', '0', '0', '0', '1', '-'], ['-', '-', '0', '-', '0', '0', '-', '1'], ['1', '0', '-', '-', '0', '0', '-', '-'], ['0', '1', '-', '-', '0', '0', '-', '-'], ['1', '-', '0', '0', '-', '0', '-', '-'], ['-', '0', '-', '0', '-', '0', '-', '1'], ['0', '-', '1', '0', '-', '0', '-', '-'], ['-', '0', '0', '-', '-', '0', '1', '-'], ['0', '-', '0', '1', '-', '0', '-', '-'], ['0', '0', '-', '-', '1', '0', '-', '-'], ['-', '1', '0', '0', '0', '-', '-', '-'], ['-', '0', '1', '0', '0', '-', '-', '-'], ['0', '-', '-', '0', '0', '-', '-', '1'], ['-', '0', '0', '1', '0', '-', '-', '-'], ['0', '-', '0', '-', '0', '-', '1', '-'], ['0', '0', '-', '-', '0', '1', '-', '-'], ['-', '0', '0', '0', '1', '-', '-', '-'], ['0', '-', '0', '0', '-', '1', '-', '-'], ['0', '0', '-', '0', '-', '-', '1', '-'], ['0', '0', '0', '-', '-', '-', '-', '1']]

    AES = AES_DIFF_BOUND_SK( 4, 4, P, V )

    Control = Control(AES)

    Control.flow( 20 )


    





import os
import re

#Ineq = [[0, -1, 3, -1, 1, 1, 1, 1, -1], [0, 1, 1, 1, 3, -1, -1, -1, 1], [0, 1, -3, 1, 1, 1, 1, 1, 1], [0, 3, 1, -1, -1, 1, -1, 1, 1], [0, 1, 1, 3, -1, 1, 1, -1, -1], [4, -3, 1, 3, -3, -1, -1, 1, 3], [4, 3, -3, -3, 1, 1, 3, -1, -1], [4, -1, -3, 1, 3, 3, -3, 1, -1], [0, -1, -1, 1, 1, -1, 3, 1, 1], [0, -1, 1, -1, 1, 3, 1, -1, 1], [0, 1, 3, -1, -1, -1, 1, 1, 1], [0, 1, 0, 1, 0, -1, 0, 1, 0], [4, -3, 3, 1, 1, -1, -3, 3, -1], [0, 1, -1, -1, 1, 1, -1, 3, 1], [4, 1, -3, 3, 1, -1, -1, -3, 3], [0, 0, 0, 0, -1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, -1, 0], [0, -1, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, -1]]

#Ineq= [[1, -1, 0, 0, 0, 0, 0, 0, 0], [1, 0, -1, 0, 0, 0, 0, 0, 0], [1, 0, 0, -1, 0, 0, 0, 0, 0], [1, 0, 0, 0, -1, 0, 0, 0, 0], [1, 0, 0, 0, 0, -1, 0, 0, 0], [1, 0, 0, 0, 0, 0, -1, 0, 0], [1, 0, 0, 0, 0, 0, 0, -1, 0], [1, 0, 0, 0, 0, 0, 0, 0, -1], [0, 0, 0, 0, 0, 0, 0, 1, 0], [2, -1, -1, -1, 1, -1, 1, 1, 1], [2, -1, -1, -1, -1, 1, 1, 1, 1], [0, -1, 1, 1, -1, -1, 1, 1, 3], [0, -1, -1, -1, 1, 1, 1, 1, 3], [0, 0, 1, 0, 0, -1, 0, 1, 1], [0, -1, 1, -1, 1, -1, 1, 3, 1], [2, 1, 1, -1, -1, -1, -1, 1, 1], [0, 1, 0, 0, 0, 0, -1, 1, 1], [0, 1, 1, 1, -1, -1, -1, 3, 1], [2, -1, 1, -1, 1, -1, -1, 1, 1], [0, 0, -1, 0, 0, 1, 0, 1, 1], [2, -1, -1, 1, -1, -1, 1, 1, 1], [2, 1, -1, -1, -1, 1, -1, 1, 1], [0, 0, 0, 1, -1, 0, 0, 1, 1], [2, 1, -1, 1, -1, -1, -1, 1, 1], [2, -1, 1, 1, -1, -1, -1, 1, 1], [0, -1, 0, 0, 0, 0, 1, 1, 1], [2, -1, -1, -1, 1, 1, -1, 1, 1], [0, 1, -1, -1, 1, 1, -1, 3, 1], [0, 0, 0, -1, 1, 0, 0, 1, 1], [0, 1, 1, -1, 1, -1, -1, 1, 3], [2, -1, -1, 1, -1, 1, -1, 1, 1], [2, 1, -1, -1, 1, -1, -1, 1, 1], [0, -1, -1, 1, -1, 1, 1, 3, 1], [0, 1, -1, 1, -1, 1, -1, 1, 3], [0, 0, 0, 0, 1, 1, 1, -1, 0], [0, 1, 0, -1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, -1, 1, 0, 1], [0, 0, -1, 0, 1, 0, 1, 0, 1], [2, -1, 1, 1, -1, 1, -1, -1, 1], [2, -1, 1, -1, 1, -1, 1, 1, -1], [0, 0, 0, 1, 1, 0, 0, -1, 1], [2, 1, -1, -1, 1, -1, 1, -1, 1], [2, 1, -1, -1, -1, 1, 1, -1, 1], [2, -1, -1, 1, 1, -1, 1, -1, 1], [2, -1, 1, -1, 1, 1, -1, -1, 1], [2, 1, -1, 1, -1, -1, 1, 1, -1], [0, 0, 1, -1, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, -1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, -1], [0, 1, -1, 3, -1, -1, 1, 1, 1], [0, 1, 1, 3, 1, -1, -1, 1, -1], [0, -1, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, -1, 1, 3, -1, 1, -1], [0, 0, -1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, -1, 1, 1, 0], [2, 1, -1, 1, 1, -1, -1, 1, -1], [2, 1, -1, 1, 1, 1, -1, -1, -1], [0, 1, 3, -1, 1, 1, -1, -1, 1], [0, -1, 3, 1, 1, -1, -1, 1, 1], [0, 1, 1, -1, 0, 0, 0, 0, 1], [0, -1, 0, 0, 1, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, -3, 1, 1], [0, 1, 1, 1, 1, -3, 1, 1, 1], [0, 1, 3, 1, -1, 1, -1, 1, -1], [0, 0, 1, 0, 0, 0, 0, 0, 0], [2, -1, 1, -1, -1, 1, 1, -1, 1], [0, 3, -1, 1, 1, -1, -1, 1, 1], [0, -1, 1, 1, -1, 3, 1, 1, -1], [2, 1, -1, -1, -1, 1, 1, 1, -1], [2, 1, 1, 1, -1, -1, -1, 1, -1], [0, 1, 0, 1, -1, 0, 1, 0, 0], [2, 1, -1, -1, 1, 1, 1, -1, -1], [0, 0, 0, 0, 0, 1, 0, 0, 0], [2, -1, -1, -1, 1, 1, 1, -1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 3, 1, -1, 1, -1, 1, -1, 1], [2, -1, 1, -1, -1, 1, 1, 1, -1], [2, 1, 1, 1, -1, 1, -1, -1, -1], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, -1, 3, 1, 1, -1, -1], [0, 1, 0, 1, 0, -1, 0, 1, 0], [2, 1, 1, 1, 1, -1, -1, -1, -1], [2, -1, 1, 1, -1, 1, 1, -1, -1], [0, 1, 3, 1, 1, -1, 1, -1, -1], [0, 1, 0, 1, 1, 0, -1, 0, 0], [2, 1, 1, 1, -1, -1, 1, -1, -1], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, -3, 1], [2, -1, 1, 1, 1, -1, -1, 1, -1], [0, 3, -1, 1, -1, 1, 1, -1, 1], [0, 1, 1, -1, 1, -1, 3, 1, -1], [0, 1, 1, 0, -1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, -1, 0], [0, 3, 1, 1, 1, 1, -1, -1, -1], [0, 1, 1, 1, -3, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, -1, 0], [0, 1, 1, 3, -1, 1, 1, -1, -1], [0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, -1, 1, 0, 0, 0], [0, -1, -1, 1, 1, -1, 3, 1, 1], [2, -1, -1, 1, -1, 1, 1, 1, -1], [0, 1, 1, 0, 0, 1, -1, 0, 0], [2, 1, 1, -1, -1, -1, 1, -1, 1], [0, -1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, -1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, -1], [2, -1, 1, 1, 1, -1, 1, -1, -1], [0, 3, 1, -1, -1, 1, -1, 1, 1], [0, -1, 3, 1, -1, 1, 1, -1, 1], [0, 1, 1, 0, 0, -1, 1, 0, 0], [0, -1, 1, -1, 3, 1, -1, 1, 1], [0, 1, 3, -1, -1, -1, 1, 1, 1], [0, 1, 1, -1, -1, 1, 1, 3, -1], [2, 1, 1, -1, 1, -1, 1, -1, -1], [0, 3, 1, 1, -1, -1, 1, 1, -1], [0, -1, -1, 1, 1, 3, -1, 1, 1], [0, 1, 1, 1, -1, -1, 3, -1, 1], [0, -1, 1, 3, 1, -1, 1, -1, 1], [0, 1, 1, 0, 1, 0, 0, -1, 0], [0, 0, 0, 0, 1, 1, -1, 1, 0], [0, -1, 1, 1, 1, 1, -1, -1, 3], [0, 1, -1, -1, 3, -1, 1, 1, 1], [0, -1, 1, 3, -1, 1, -1, 1, 1], [0, -1, -1, 3, 1, 1, 1, 1, -1], [0, -1, 1, 1, 1, 1, 3, -1, -1], [2, 1, -1, -1, 1, 1, -1, 1, -1], [0, 1, 1, 1, 1, 1, 1, 1, -3], [0, 0, 1, 0, 0, 1, 0, 1, -1], [0, 1, -1, -1, 1, 1, 3, -1, 1], [2, 1, -1, -1, 1, -1, 1, 1, -1], [2, 1, 1, -1, 1, 1, -1, -1, -1], [2, -1, -1, 1, 1, 1, -1, -1, 1], [2, 1, 1, -1, -1, 1, -1, 1, -1], [0, 1, 0, 0, 0, 0, 1, -1, 1], [2, -1, 1, 1, -1, 1, -1, 1, -1], [0, 1, -1, 3, 1, 1, -1, -1, 1], [0, 1, -3, 1, 1, 1, 1, 1, 1], [0, 0, 1, -1, 1, 1, 0, 0, 0], [0, 1, -1, 1, 1, 3, 1, -1, -1], [0, 0, 1, 0, -1, 0, 1, 0, 1], [0, 1, 1, 1, -1, 3, -1, -1, 1], [0, 0, 0, 0, -1, 1, 1, 1, 0], [0, 1, -1, 1, 1, -1, 1, 3, -1], [0, 1, -1, 0, 0, 1, 1, 0, 0], [0, -1, 1, 1, 3, -1, 1, 1, -1], [0, -3, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, -1, 1, 0, 0, 1], [0, 1, -1, 1, -1, 1, 3, 1, -1], [0, -1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, -1, 1], [0, 0, 0, 1, 1, 0, 0, 1, -1], [0, -1, 1, 1, 1, 1, -1, 3, -1], [2, 1, -1, 1, -1, -1, 1, -1, 1], [2, -1, 1, -1, -1, -1, 1, 1, 1], [2, 1, -1, 1, -1, 1, 1, -1, -1], [0, 1, 0, -1, 1, 0, 1, 0, 0], [0, 1, 1, -3, 1, 1, 1, 1, 1], [0, -1, 1, 0, 1, 0, 0, 1, 0], [2, 1, 1, -1, 1, -1, -1, -1, 1], [0, 0, 0, 1, 0, 1, 1, 0, -1], [0, -1, 3, -1, 1, 1, 1, 1, -1], [0, 0, 1, 0, 1, 0, 1, 0, -1], [0, 1, -1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, -1, 0, 1], [0, 1, -1, 1, 1, -1, 1, -1, 3], [2, 1, 1, -1, -1, 1, -1, -1, 1], [2, -1, -1, 1, 1, 1, -1, 1, -1], [0, 1, 1, 1, 3, -1, -1, -1, 1], [0, 3, -1, -1, 1, 1, 1, 1, -1], [0, 0, -1, 1, 1, 1, 0, 0, 0], [2, -1, 1, -1, 1, 1, -1, 1, -1], [0, -1, 1, -1, 1, 3, 1, -1, 1], [0, 1, 0, 0, 1, -1, 0, 0, 1], [2, -1, -1, 1, 1, -1, 1, 1, -1], [0, 0, 0, 1, 0, 1, -1, 0, 1], [2, 1, -1, 1, 1, -1, -1, -1, 1], [2, 1, -1, 1, -1, 1, -1, -1, 1], [0, 1, 1, -1, -1, 1, 1, -1, 3], [0, -1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, -1, 0, 1, 1, 0, 1], [2, 1, 1, -1, -1, -1, 1, 1, -1], [0, 1, -1, -1, -1, 3, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, -1], [2, -1, 1, -1, 1, 1, 1, -1, -1], [0, -1, -1, 1, 3, 1, 1, -1, 1], [0, 1, -1, 1, 3, 1, -1, 1, -1], [2, -1, 1, 1, 1, -1, -1, -1, 1], [2, -1, -1, 1, 1, 1, 1, -1, -1], [2, -1, 1, 1, -1, -1, 1, -1, 1], [0, -1, 1, -1, -1, 1, 3, 1, 1], [0, 1, -1, 1, 0, 0, 0, 0, 1]]

def passIneq( I ):
    FLAG = True
    for it in Ineq:
        l = it[0];
        for i in range(4):
            l += it[i+1] * I[i];
        for i in range(4):
            l += it[i+5] * I[i + 4];

        if l < 0:
            FLAG = False
            break
    return FLAG

def MC( X ):
    # 0, 1, 1, 1
    # 1, 0, 1, 1
    # 1, 1, 0, 1
    # 1, 1, 1, 0

    Y0 = X[1] ^ X[2] ^ X[3] 
    Y1 = X[0] ^ X[2] ^ X[3] 
    Y2 = X[0] ^ X[1] ^ X[3] 
    Y3 = X[0] ^ X[1] ^ X[2] 

    return [ Y0, Y1, Y2, Y3 ] 

S = set()

for x0 in range(16):
    for x1 in range(16):
        for x2 in range(16):
            for x3 in range(16):
                X = [ x0, x1, x2, x3 ]
                Y = MC( X )

                v = []
                for i in range(4):
                    if X[i] == 0:
                        v.append( 0 )
                    else:
                        v.append( 1 )

                for i in range(4):
                    if Y[i] == 0:
                        v.append( 0 )
                    else:
                        v.append( 1 )

                #if v == [0, 1, 1, 1, 1, 0, 1, 1]:
                #    print( X, Y )
                #    print( MC( X ) ) 
                #    break
                S.add( tuple( v ) ) 

S = set()

L = []
for x in range(256):
    X = []
    for j in range(8):
        X.append( x >> ( 7 - j ) & 0x1 )

    if sum( X ) >= 5 or sum( X ) == 0:
        S.add( tuple ( X )  )

L = []
for x in range(256):
    X = []
    for j in range(8):
        X.append( x >> ( 7 - j ) & 0x1 )

    if tuple( X ) not in S:
        L.append( X )

filename = 'MC.txt' 

with open( filename, 'w' ) as f:
    print( '.i %d' % len( L[0] ), file = f )
    print( '.o 1 ', file = f )
    print( '.p %d ' % len( L ), file = f )
    for l in L:
        for ll in l:
            print( ll, end = '', file = f )
        print( ' 1', file = f )

    print( '.e', file = f )

os.system( 'espresso %s > %s.res' % ( filename, filename ) )

L = []

pattern = re.compile( r'([01-]+) 1' )
P = []
with open( '%s.res' % filename, 'r' ) as f:
    lines = f.readlines()
    for line in lines:
        m = re.match( pattern, line )
        if m:
            P.append( list ( m.group( 1 ) ) )

print( P )











    
